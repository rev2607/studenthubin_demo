//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentHubMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<shub_chapters> shub_chapters { get; set; }
        public virtual DbSet<shub_coursereviews> shub_coursereviews { get; set; }
        public virtual DbSet<shub_courses> shub_courses { get; set; }
        public virtual DbSet<DropdownTypes> DropdownTypes { get; set; }
        public virtual DbSet<shub_enquiries> shub_enquiries { get; set; }
        public virtual DbSet<shub_exceptions> shub_exceptions { get; set; }
        public virtual DbSet<InstitutionCourses> InstitutionCourses { get; set; }
        public virtual DbSet<Institutions> Institutions { get; set; }
        public virtual DbSet<JobAlerts> JobAlerts { get; set; }
        public virtual DbSet<MainCourses> MainCourses { get; set; }
        public virtual DbSet<MockTestQuestions> MockTestQuestions { get; set; }
        public virtual DbSet<MockTests> MockTests { get; set; }
        public virtual DbSet<shub_pages> shub_pages { get; set; }
        public virtual DbSet<QuestionPapers> QuestionPapers { get; set; }
        public virtual DbSet<shub_sectionmaterials> shub_sectionmaterials { get; set; }
        public virtual DbSet<shub_sectiontestquestions> shub_sectiontestquestions { get; set; }
        public virtual DbSet<shub_sectiontests> shub_sectiontests { get; set; }
        public virtual DbSet<shub_settings> shub_settings { get; set; }
        public virtual DbSet<shub_students> shub_students { get; set; }
        public virtual DbSet<shub_users> shub_users { get; set; }
        public virtual DbSet<getallstudentslist> getallstudentslists { get; set; }
        public virtual DbSet<NewsAlerts> NewsAlerts { get; set; }
        public virtual DbSet<Placements> Placements { get; set; }
        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<InstitutionCourseTrainingModes> InstitutionCourseTrainingModes { get; set; }
        public virtual DbSet<SectionCourses> SectionCourses { get; set; }
        public virtual DbSet<VW_TutorialCoursesList> VW_TutorialCoursesList1 { get; set; }
        public virtual DbSet<VM_MockTestsList> VM_MockTestsList { get; set; }
        public virtual DbSet<DropdownTypesRef> DropdownTypesRefs { get; set; }
        public virtual DbSet<CollegeCourses> CollegeCourses { get; set; }
        public virtual DbSet<Colleges> Colleges { get; set; }
        public virtual DbSet<CollegeCoursesRelation> CollegeCoursesRelations { get; set; }
        public virtual DbSet<CollegeFacilities> CollegeFacilities { get; set; }
        public virtual DbSet<CollegeImages> CollegeImages { get; set; }
        public virtual DbSet<ExamCourses> ExamCourses { get; set; }
        public virtual DbSet<ad_mock_register> ad_mock_register { get; set; }
        public virtual DbSet<his_shub_dropdowntypes> his_shub_dropdowntypes { get; set; }
        public virtual DbSet<his_shub_mocktestquestions> his_shub_mocktestquestions { get; set; }
        public virtual DbSet<his_shub_mocktests> his_shub_mocktests { get; set; }
        public virtual DbSet<his_shub_collegecourse> his_shub_collegecourse { get; set; }
        public virtual DbSet<his_shub_collegecoursesrelation> his_shub_collegecoursesrelation { get; set; }
        public virtual DbSet<his_shub_collegefacilities> his_shub_collegefacilities { get; set; }
        public virtual DbSet<his_shub_collegeimages> his_shub_collegeimages { get; set; }
        public virtual DbSet<his_shub_colleges> his_shub_colleges { get; set; }
        public virtual DbSet<his_shub_institutioncourses> his_shub_institutioncourses { get; set; }
        public virtual DbSet<his_shub_institutioncoursestrainingmodes> his_shub_institutioncoursestrainingmodes { get; set; }
        public virtual DbSet<his_shub_institutions> his_shub_institutions { get; set; }
        public virtual DbSet<his_shub_maincourses> his_shub_maincourses { get; set; }
        public virtual DbSet<his_shub_addresses> his_shub_addresses { get; set; }
        public virtual DbSet<rslt_CourseTypes> rslt_CourseTypes { get; set; }
        public virtual DbSet<rslt_DistrictsMaster> rslt_DistrictsMaster { get; set; }
        public virtual DbSet<rslt_IntermediateYear2Regular> rslt_IntermediateYear2Regular { get; set; }
        public virtual DbSet<rslt_IntermediateYear2Regular_Temp> rslt_IntermediateYear2Regular_Temp { get; set; }
        public virtual DbSet<rslt_IntermediateYear2Voc> rslt_IntermediateYear2Voc { get; set; }
        public virtual DbSet<rslt_IntermediateYear2Voc_Temp> rslt_IntermediateYear2Voc_Temp { get; set; }
        public virtual DbSet<rslt_SubjectsMaster> rslt_SubjectsMaster { get; set; }
        public virtual DbSet<rst_CoursesMaster> rst_CoursesMaster { get; set; }
        public virtual DbSet<rslt_UploadedResults> rslt_UploadedResults { get; set; }
        public virtual DbSet<rslt_WebApiDetails> rslt_WebApiDetails { get; set; }
    
        public virtual int GetAdminData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAdminData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetChaptersData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChaptersData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetCoursesData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCoursesData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetEnquiriesData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEnquiriesData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetFrontData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFrontData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetReviewsData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReviewsData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetSectionData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSectionData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetStudentDashboard(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStudentDashboard", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetStudentsData(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetStudentsData", operateModeParameter, keyValueParameter);
        }
    
        public virtual int GetTestQuestions(string operateMode, string keyValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTestQuestions", operateModeParameter, keyValueParameter);
        }
    
        public virtual int MockTestsData(Nullable<long> sno, Nullable<long> courseId, string difficulty, string description, string maximumQuestions)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(long));
    
            var difficultyParameter = difficulty != null ?
                new ObjectParameter("Difficulty", difficulty) :
                new ObjectParameter("Difficulty", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var maximumQuestionsParameter = maximumQuestions != null ?
                new ObjectParameter("MaximumQuestions", maximumQuestions) :
                new ObjectParameter("MaximumQuestions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MockTestsData", snoParameter, courseIdParameter, difficultyParameter, descriptionParameter, maximumQuestionsParameter);
        }
    
        public virtual int SettingsData(string operateMode, string userId, string settingName, string settingValue)
        {
            var operateModeParameter = operateMode != null ?
                new ObjectParameter("OperateMode", operateMode) :
                new ObjectParameter("OperateMode", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var settingNameParameter = settingName != null ?
                new ObjectParameter("SettingName", settingName) :
                new ObjectParameter("SettingName", typeof(string));
    
            var settingValueParameter = settingValue != null ?
                new ObjectParameter("SettingValue", settingValue) :
                new ObjectParameter("SettingValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SettingsData", operateModeParameter, userIdParameter, settingNameParameter, settingValueParameter);
        }
    
        public virtual int DropdownTypesData(Nullable<long> sno, string groupName, string typeValue, string typeValueUrlKeyword)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var typeValueParameter = typeValue != null ?
                new ObjectParameter("TypeValue", typeValue) :
                new ObjectParameter("TypeValue", typeof(string));
    
            var typeValueUrlKeywordParameter = typeValueUrlKeyword != null ?
                new ObjectParameter("TypeValueUrlKeyword", typeValueUrlKeyword) :
                new ObjectParameter("TypeValueUrlKeyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DropdownTypesData", snoParameter, groupNameParameter, typeValueParameter, typeValueUrlKeywordParameter);
        }
    
        public virtual int MockTestQuestionsData(Nullable<long> sno, Nullable<long> mockTestId, string questionText, string answerOption, string optionA, string optionAImage, string optionB, string optionBImage, string optionC, string optionCImage, string optionD, string optionDImage, string explanation, string explanationImage)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var mockTestIdParameter = mockTestId.HasValue ?
                new ObjectParameter("MockTestId", mockTestId) :
                new ObjectParameter("MockTestId", typeof(long));
    
            var questionTextParameter = questionText != null ?
                new ObjectParameter("QuestionText", questionText) :
                new ObjectParameter("QuestionText", typeof(string));
    
            var answerOptionParameter = answerOption != null ?
                new ObjectParameter("AnswerOption", answerOption) :
                new ObjectParameter("AnswerOption", typeof(string));
    
            var optionAParameter = optionA != null ?
                new ObjectParameter("OptionA", optionA) :
                new ObjectParameter("OptionA", typeof(string));
    
            var optionAImageParameter = optionAImage != null ?
                new ObjectParameter("OptionAImage", optionAImage) :
                new ObjectParameter("OptionAImage", typeof(string));
    
            var optionBParameter = optionB != null ?
                new ObjectParameter("OptionB", optionB) :
                new ObjectParameter("OptionB", typeof(string));
    
            var optionBImageParameter = optionBImage != null ?
                new ObjectParameter("OptionBImage", optionBImage) :
                new ObjectParameter("OptionBImage", typeof(string));
    
            var optionCParameter = optionC != null ?
                new ObjectParameter("OptionC", optionC) :
                new ObjectParameter("OptionC", typeof(string));
    
            var optionCImageParameter = optionCImage != null ?
                new ObjectParameter("OptionCImage", optionCImage) :
                new ObjectParameter("OptionCImage", typeof(string));
    
            var optionDParameter = optionD != null ?
                new ObjectParameter("OptionD", optionD) :
                new ObjectParameter("OptionD", typeof(string));
    
            var optionDImageParameter = optionDImage != null ?
                new ObjectParameter("OptionDImage", optionDImage) :
                new ObjectParameter("OptionDImage", typeof(string));
    
            var explanationParameter = explanation != null ?
                new ObjectParameter("Explanation", explanation) :
                new ObjectParameter("Explanation", typeof(string));
    
            var explanationImageParameter = explanationImage != null ?
                new ObjectParameter("ExplanationImage", explanationImage) :
                new ObjectParameter("ExplanationImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MockTestQuestionsData", snoParameter, mockTestIdParameter, questionTextParameter, answerOptionParameter, optionAParameter, optionAImageParameter, optionBParameter, optionBImageParameter, optionCParameter, optionCImageParameter, optionDParameter, optionDImageParameter, explanationParameter, explanationImageParameter);
        }
    
        public virtual int InstitutionCourseData(Nullable<long> sno, Nullable<long> institutionId, Nullable<long> courseId, string courseFee, string duration, string classRoomTraining, string onlineTraining, string proxy)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var institutionIdParameter = institutionId.HasValue ?
                new ObjectParameter("InstitutionId", institutionId) :
                new ObjectParameter("InstitutionId", typeof(long));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(long));
    
            var courseFeeParameter = courseFee != null ?
                new ObjectParameter("CourseFee", courseFee) :
                new ObjectParameter("CourseFee", typeof(string));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var classRoomTrainingParameter = classRoomTraining != null ?
                new ObjectParameter("ClassRoomTraining", classRoomTraining) :
                new ObjectParameter("ClassRoomTraining", typeof(string));
    
            var onlineTrainingParameter = onlineTraining != null ?
                new ObjectParameter("OnlineTraining", onlineTraining) :
                new ObjectParameter("OnlineTraining", typeof(string));
    
            var proxyParameter = proxy != null ?
                new ObjectParameter("Proxy", proxy) :
                new ObjectParameter("Proxy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InstitutionCourseData", snoParameter, institutionIdParameter, courseIdParameter, courseFeeParameter, durationParameter, classRoomTrainingParameter, onlineTrainingParameter, proxyParameter);
        }
    
        public virtual int InstitutionsData(Nullable<long> sno, string name, string type, string uRLKeyword, string about, string address, string area, string city, string pincode, string state, string country, string phone1, string phone2, string landline, string email1, string email2, string website, string status, string isTop, string isFeatured, string isTrending, string logo, string broucher, string location)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var uRLKeywordParameter = uRLKeyword != null ?
                new ObjectParameter("URLKeyword", uRLKeyword) :
                new ObjectParameter("URLKeyword", typeof(string));
    
            var aboutParameter = about != null ?
                new ObjectParameter("About", about) :
                new ObjectParameter("About", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phone1Parameter = phone1 != null ?
                new ObjectParameter("Phone1", phone1) :
                new ObjectParameter("Phone1", typeof(string));
    
            var phone2Parameter = phone2 != null ?
                new ObjectParameter("Phone2", phone2) :
                new ObjectParameter("Phone2", typeof(string));
    
            var landlineParameter = landline != null ?
                new ObjectParameter("Landline", landline) :
                new ObjectParameter("Landline", typeof(string));
    
            var email1Parameter = email1 != null ?
                new ObjectParameter("Email1", email1) :
                new ObjectParameter("Email1", typeof(string));
    
            var email2Parameter = email2 != null ?
                new ObjectParameter("Email2", email2) :
                new ObjectParameter("Email2", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var isTopParameter = isTop != null ?
                new ObjectParameter("IsTop", isTop) :
                new ObjectParameter("IsTop", typeof(string));
    
            var isFeaturedParameter = isFeatured != null ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(string));
    
            var isTrendingParameter = isTrending != null ?
                new ObjectParameter("IsTrending", isTrending) :
                new ObjectParameter("IsTrending", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var broucherParameter = broucher != null ?
                new ObjectParameter("Broucher", broucher) :
                new ObjectParameter("Broucher", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InstitutionsData", snoParameter, nameParameter, typeParameter, uRLKeywordParameter, aboutParameter, addressParameter, areaParameter, cityParameter, pincodeParameter, stateParameter, countryParameter, phone1Parameter, phone2Parameter, landlineParameter, email1Parameter, email2Parameter, websiteParameter, statusParameter, isTopParameter, isFeaturedParameter, isTrendingParameter, logoParameter, broucherParameter, locationParameter);
        }
    
        public virtual int MainCoursesData(Nullable<long> sno, string name, string uRLKeyword, string description, string isInTopList, string isFeatured, string isTrending, Nullable<long> stream, string logo, string status, string metaTitle, string metaDescription)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var uRLKeywordParameter = uRLKeyword != null ?
                new ObjectParameter("URLKeyword", uRLKeyword) :
                new ObjectParameter("URLKeyword", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isInTopListParameter = isInTopList != null ?
                new ObjectParameter("IsInTopList", isInTopList) :
                new ObjectParameter("IsInTopList", typeof(string));
    
            var isFeaturedParameter = isFeatured != null ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(string));
    
            var isTrendingParameter = isTrending != null ?
                new ObjectParameter("IsTrending", isTrending) :
                new ObjectParameter("IsTrending", typeof(string));
    
            var streamParameter = stream.HasValue ?
                new ObjectParameter("Stream", stream) :
                new ObjectParameter("Stream", typeof(long));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var metaTitleParameter = metaTitle != null ?
                new ObjectParameter("MetaTitle", metaTitle) :
                new ObjectParameter("MetaTitle", typeof(string));
    
            var metaDescriptionParameter = metaDescription != null ?
                new ObjectParameter("MetaDescription", metaDescription) :
                new ObjectParameter("MetaDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MainCoursesData", snoParameter, nameParameter, uRLKeywordParameter, descriptionParameter, isInTopListParameter, isFeaturedParameter, isTrendingParameter, streamParameter, logoParameter, statusParameter, metaTitleParameter, metaDescriptionParameter);
        }
    
        public virtual int InstitutionsDataUpdate(Nullable<long> sno, string name, string type, string uRLKeyword, string about, string address, string area, string city, string pincode, string state, string country, string phone1, string phone2, string landline, string email1, string email2, string website, string status, string isTop, string isFeatured, string isTrending, string logo, string broucher, string location)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("Sno", sno) :
                new ObjectParameter("Sno", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var uRLKeywordParameter = uRLKeyword != null ?
                new ObjectParameter("URLKeyword", uRLKeyword) :
                new ObjectParameter("URLKeyword", typeof(string));
    
            var aboutParameter = about != null ?
                new ObjectParameter("About", about) :
                new ObjectParameter("About", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phone1Parameter = phone1 != null ?
                new ObjectParameter("Phone1", phone1) :
                new ObjectParameter("Phone1", typeof(string));
    
            var phone2Parameter = phone2 != null ?
                new ObjectParameter("Phone2", phone2) :
                new ObjectParameter("Phone2", typeof(string));
    
            var landlineParameter = landline != null ?
                new ObjectParameter("Landline", landline) :
                new ObjectParameter("Landline", typeof(string));
    
            var email1Parameter = email1 != null ?
                new ObjectParameter("Email1", email1) :
                new ObjectParameter("Email1", typeof(string));
    
            var email2Parameter = email2 != null ?
                new ObjectParameter("Email2", email2) :
                new ObjectParameter("Email2", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var isTopParameter = isTop != null ?
                new ObjectParameter("IsTop", isTop) :
                new ObjectParameter("IsTop", typeof(string));
    
            var isFeaturedParameter = isFeatured != null ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(string));
    
            var isTrendingParameter = isTrending != null ?
                new ObjectParameter("IsTrending", isTrending) :
                new ObjectParameter("IsTrending", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var broucherParameter = broucher != null ?
                new ObjectParameter("Broucher", broucher) :
                new ObjectParameter("Broucher", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InstitutionsDataUpdate", snoParameter, nameParameter, typeParameter, uRLKeywordParameter, aboutParameter, addressParameter, areaParameter, cityParameter, pincodeParameter, stateParameter, countryParameter, phone1Parameter, phone2Parameter, landlineParameter, email1Parameter, email2Parameter, websiteParameter, statusParameter, isTopParameter, isFeaturedParameter, isTrendingParameter, logoParameter, broucherParameter, locationParameter);
        }
    }
}
